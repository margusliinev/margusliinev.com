name: CI

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

permissions:
    contents: read
    pull-requests: read

concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: true

jobs:
    format_lint_typecheck:
        name: Code Quality (format, lint, typecheck)
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Setup Node.js 24
              uses: actions/setup-node@v5
              with:
                  node-version: 24
                  cache: npm
                  cache-dependency-path: package-lock.json

            - name: Install dependencies
              run: npm ci

            - name: Run format, lint and typecheck
              run: npm run check

    build_and_push_image:
        name: Build and push Docker image to ECR
        needs: format_lint_typecheck
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        runs-on: ubuntu-latest
        env:
            ECR_REPOSITORY: margusliinev.com
            IMAGE_TAG: ${{ github.sha }}
        outputs:
            image-uri: ${{ steps.image_meta.outputs.image }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v5
              with:
                  aws-region: ${{ secrets.AWS_REGION }}
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build Docker image
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  docker build -t "$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" -f ./Dockerfile .

            - name: Push Docker image
              env:
                  REGISTRY: ${{ steps.login-ecr.outputs.registry }}
              run: |
                  docker push "$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

            - name: Export image URI
              id: image_meta
              run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
